/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
 bool cmp(Interval a,Interval b){
    return a.start<b.start;
}
vector<Interval> Solution::merge(vector<Interval> &A) {
   vector<Interval> Int;
       sort(A.begin(),A.end(),cmp);
   Int.push_back({A[0].start,A[0].end});
   int l=0;
   int i;
   for(i=1;i<A.size();i++)
   {
       if(A[i].start<=Int[l].end)
       {
           Int[l].start=min(A[i].start,Int[l].start);
           Int[l].end=max(A[i].end,Int[l].end);
       }
       else{
           l++;
           Int.push_back({A[i].start,A[i].end});
       }
   }
   return Int;
}
