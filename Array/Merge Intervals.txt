/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
 bool compare(Interval a,Interval b)
{
return(a.start<b.start);
}
vector<Interval> Solution::insert(vector<Interval> &intervals, Interval newInterval) {
    intervals.push_back({newInterval.start,newInterval.end});

int n = intervals.size();
sort(intervals.begin(),intervals.end(),compare);
vector<Interval> ans;
ans.push_back({intervals[0].start,intervals[0].end});
int l = 0;
for(int i=1;i<n;i++)
{
    if(intervals[i].start<=ans[l].end)
    {
        ans[l].start = min(ans[l].start,intervals[i].start);
        ans[l].end = max(ans[l].end,intervals[i].end);
    }
    else
    {
        l++;
        ans.push_back({intervals[i].start,intervals[i].end});
    }
}
return ans;
}
